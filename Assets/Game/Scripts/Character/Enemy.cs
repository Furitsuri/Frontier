using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Enemy : Character
{
    /// <summary>
    /// 思考タイプ
    /// </summary>
    public enum ThinkingType
    {
        NEAR = 0,   // 自分の距離に近い敵を優先

        NUM
    }

    public struct Plan
    {
        // 移動目標グリッドインデックス値
        int destGridIndex;
        // 攻撃目標ユニットインデックス値
        int targetCharaIndex;
    }

    public ThinkingType ThinkType { get; private set; }
    public EMAIBase EmAI { get; private set; }

    // Start is called before the first frame update
    void Start()
    {
        // TODO : 試運転用にパラメータをセット。後ほど削除
        this.param.characterTag = CHARACTER_TAG.CHARACTER_ENEMY;
        this.param.characterIndex = 5;
        this.param.moveRange = 2;
        this.param.initGridIndex = this.tmpParam.gridIndex = 13;
        this.param.MaxHP = this.param.CurHP = 8;
        this.param.Atk = 3;
        this.param.Def = 2;
        this.param.initDir = Constants.Direction.BACK;
        this.param.UICameraLengthY = 0.8f;
        this.param.UICameraLengthZ = 1.4f;
        this.param.UICameraLookAtCorrectY = 0.45f;
        BattleManager.Instance.AddEnemyToList(this);

        // 思考タイプによってemAIに代入する派生クラスを変更する
        switch(ThinkType)
        {
            case ThinkingType.NEAR:
                EmAI = new EMAIAggressive();
                break;
            default:
                EmAI = new EMAIBase();
                break;
        }

        EmAI.Init(this);
    }

    override public void setAnimator(ANIME_TAG animTag)
    {
        _animator.SetTrigger(_animNames[(int)animTag]);
    }

    override public void setAnimator(ANIME_TAG animTag, bool b)
    {
        _animator.SetBool(_animNames[(int)animTag], b);
    }

    public override void Die()
    {
        base.Die();

        BattleManager.Instance.RemoveEnemyFromList(this);
        // Destroy(this);
    }

    /// <summary>
    /// 目的座標と標的キャラクターを決定する
    /// </summary>
    public (bool, bool) DetermineDestinationAndTargetWithAI()
    {
        return EmAI.DetermineDestinationAndTarget(param, tmpParam);
    }

    /// <summary>
    /// 目標座標と標的キャラクターを取得します
    /// </summary>
    public void FetchDestinationAndTarget(out int destinationIndex, out Character targetCharacter)
    {
        destinationIndex    = EmAI.GetDestinationGridIndex();
        targetCharacter     = EmAI.GetTargetCharacter();
    }
}